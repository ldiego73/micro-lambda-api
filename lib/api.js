"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Api=void 0;const errors_1=require("./errors"),http_1=require("./http"),logger_1=require("./logger"),request_1=require("./request"),response_1=require("./response"),router_1=require("./router"),socket_1=require("./socket");class Api{constructor(t={}){this.options=t,this.routes=[],this.actions=[],this.middlewares=[],this.log=logger_1.Logger.create()}use(t){for(const e of t)"function"==typeof e?this.middlewares.push(e):router_1.instanceOfRoute(e)?this.routes.push(e):socket_1.instanceOfAction(e)&&this.actions.push(e);return this}finally(t){"function"==typeof t&&(this.middlewareFinally=t)}async listen(t,e){var r;const o=new request_1.ApiRequest(t,e),s=new response_1.ApiResponse(o),i={context:e},n=(null===(r=this.options.logger)||void 0===r?void 0:r.trace)||!1;void 0!==this.options.logger&&(i.pretty=this.options.logger.pretty||void 0,i.handler=this.options.logger.handler||void 0),logger_1.Logger.configure(i),n&&this.trace("REQUEST","request",o.toRequest());try{let t;if(o.proxyIntegration===http_1.HttpIntegration.APIGW_WS_API){const e=this.findAction(o);await this.executeMiddlewares(o),t=await e.handler(o,s)}else{const[e,r]=this.findRoute(o);await this.executeMiddlewares(o),o.params=r,t=await e.handler(o,s)}const e=s.toResponse()||s.send(t);return this.middlewareFinally&&await this.middlewareFinally(o,s),n&&this.trace("RESPONSE","response",e),e}catch(t){const[e,r]=this.handleErrors(t,o);return n&&this.trace("ERROR","error",r),e}}trace(t,e,r){this.log.clearExtras(),this.log.addExtra(e,r),this.log.trace(t)}findRoute(t){if(!this.routes.length)throw new errors_1.RouteError(t.path);const e=this.routes.filter((e=>e.method===t.method));if(0===e.length)throw new errors_1.MethodError(t.method,t.path);const r=this.matchRoute(e,t.path);if(!r)throw new errors_1.RouteError(t.path);return r}findAction(t){if(!this.actions.length)throw new errors_1.ActionError(t.route);const e=t.body.action||"",r=this.actions.find((r=>socket_1.isDefaultAction(t.route)?r.name===e:r.name===t.route));if(!r)throw new errors_1.ActionError(t.route);return r}async executeMiddlewares(t){const e=new response_1.ApiResponse(t);for(let r=0;r<this.middlewares.length;r++){const o=this.middlewares[r];await o(t,e)}}matchRoute(t,e){for(const r of t){const t=router_1.getRouteParams(r.path,e);if(t)return[r,t]}}handleErrors(t,e){let r=http_1.HttpStatus.INTERNAL_SERVER_ERROR;const o=new response_1.ApiResponse(e),s={code:errors_1.ApiError.GENERIC_ERROR,message:t.message||"",status:r};return t instanceof errors_1.HttpError&&(s.code=t.code,t instanceof errors_1.MethodError?(r=http_1.HttpStatus.METHOD_NOT_ALLOWED,s.status=r,s.data={method:t.method,path:t.path}):t instanceof errors_1.RouteError?(r=http_1.HttpStatus.NOT_FOUND,s.status=r,s.data={path:t.path}):t instanceof errors_1.ActionError&&(r=http_1.HttpStatus.NOT_FOUND,s.status=r,s.data={name:t.name})),[o.status(r).error(s),s]}}exports.Api=Api;