"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Logger=exports.LoggerLevel=void 0;const uuid_1=require("./uuid"),{stdout:stdout,stderr:stderr}=process;var LoggerLevel;!function(e){e.Fatal="fatal",e.Error="error",e.Warn="warn",e.Info="info",e.Debug="debug",e.Trace="trace"}(LoggerLevel=exports.LoggerLevel||(exports.LoggerLevel={}));const LogKeys=["id","level","name","group","message","data","time","timeStamp","lambda"];class Logger{constructor(){this._group="",this._log={},this._extras={},Logger.id=Logger.id||uuid_1.uuidv4(),this._extras={}}static configure(e={}){if(Logger.options.pretty=e.pretty||!1,void 0!==e.context&&e.context){const{context:t}=e;Logger.id=t.awsRequestId||uuid_1.uuidv4(),t.functionName&&(Logger.lambda={name:t.functionName,version:t.functionVersion,memoryLimitInMB:t.memoryLimitInMB,arn:t.invokedFunctionArn})}"function"==typeof e.handler&&(Logger.options.handler=e.handler)}static create(){return new Logger}group(e){return this._group=e,this}addExtra(e,t){if(LogKeys.indexOf(e)>-1)throw Error(`The Key "${e}" cannot be used`);this._extras[e]=t}getExtra(e){return this._extras[e]}removeExtra(e){delete this._extras[e]}clearExtras(){this._extras={}}fatal(e,t){this.log(LoggerLevel.Fatal,e,t)}error(e,t){this.log(LoggerLevel.Error,e,t)}warn(e,t){this.log(LoggerLevel.Warn,e,t)}info(e,t){this.log(LoggerLevel.Info,e,t)}debug(e,t){this.log(LoggerLevel.Debug,e,t)}trace(e,t){this.log(LoggerLevel.Trace,e,t)}toLog(){return this._log}log(e,t,r){const o=new Date;let g={id:Logger.id,level:e,time:o.getTime(),timeStamp:o.toISOString(),message:t};this._group&&(g.group=this._group),"object"==typeof r&&(g.data={...r}),"object"==typeof Logger.lambda&&(g.lambda=Logger.lambda),this._extras&&Object.keys(this._extras).length>0&&(g=Object.assign(g,{...this._extras})),this._log=g,"function"==typeof Logger.options.handler&&Logger.options.handler(g),e===LoggerLevel.Fatal||e===LoggerLevel.Error?this.out(g):this.err(g)}out(e){Logger.options.pretty?stdout.write(this.toPrettyLog(e)):stdout.write(this.toJsonLog(e))}err(e){Logger.options.pretty?stderr.write(this.toPrettyLog(e)):stderr.write(this.toJsonLog(e))}toPrettyLog(e){return`[${e.timeStamp}] [${e.level.toUpperCase()}] - ${e.message} => ${JSON.stringify(e)}\n`}toJsonLog(e){return`${JSON.stringify(e)}\n`}}exports.Logger=Logger,Logger.options={},Logger.id="";